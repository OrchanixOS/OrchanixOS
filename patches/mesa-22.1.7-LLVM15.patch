diff '--color=auto' -aruN old/src/gallium/auxiliary/draw/draw_llvm.c new/src/gallium/auxiliary/draw/draw_llvm.c
--- old/src/gallium/auxiliary/draw/draw_llvm.c	2022-08-18 00:53:25.000000000 +0800
+++ new/src/gallium/auxiliary/draw/draw_llvm.c	2022-09-07 01:03:32.176429350 +0800
@@ -797,6 +797,11 @@
    llvm->context = context;
    if (!llvm->context) {
       llvm->context = LLVMContextCreate();
+
+#if LLVM_VERSION_MAJOR >= 15
+      LLVMContextSetOpaquePointers(llvm->context, false);
+#endif
+
       llvm->context_owned = true;
    }
    if (!llvm->context)
diff '--color=auto' -aruN old/src/gallium/auxiliary/gallivm/lp_bld_arit.c new/src/gallium/auxiliary/gallivm/lp_bld_arit.c
--- old/src/gallium/auxiliary/gallivm/lp_bld_arit.c	2022-08-18 00:53:25.000000000 +0800
+++ new/src/gallium/auxiliary/gallivm/lp_bld_arit.c	2022-09-07 00:49:59.670562350 +0800
@@ -391,16 +391,10 @@
          return LLVMBuildNot(builder, a, "");
    }
 
-   if(LLVMIsConstant(a))
-      if (type.floating)
-          return LLVMConstFSub(bld->one, a);
-      else
-          return LLVMConstSub(bld->one, a);
+   if (type.floating)
+      return LLVMBuildFSub(builder, bld->one, a, "");
    else
-      if (type.floating)
-         return LLVMBuildFSub(builder, bld->one, a, "");
-      else
-         return LLVMBuildSub(builder, bld->one, a, "");
+      return LLVMBuildSub(builder, bld->one, a, "");
 }
 
 
@@ -479,16 +473,10 @@
       }
    }
 
-   if(LLVMIsConstant(a) && LLVMIsConstant(b))
-      if (type.floating)
-         res = LLVMConstFAdd(a, b);
-      else
-         res = LLVMConstAdd(a, b);
+   if (type.floating)
+      res = LLVMBuildFAdd(builder, a, b, "");
    else
-      if (type.floating)
-         res = LLVMBuildFAdd(builder, a, b, "");
-      else
-         res = LLVMBuildAdd(builder, a, b, "");
+      res = LLVMBuildAdd(builder, a, b, "");
 
    /* clamp to ceiling of 1.0 */
    if(bld->type.norm && (bld->type.floating || bld->type.fixed))
@@ -815,16 +803,10 @@
       }
    }
 
-   if(LLVMIsConstant(a) && LLVMIsConstant(b))
-      if (type.floating)
-         res = LLVMConstFSub(a, b);
-      else
-         res = LLVMConstSub(a, b);
+   if (type.floating)
+      res = LLVMBuildFSub(builder, a, b, "");
    else
-      if (type.floating)
-         res = LLVMBuildFSub(builder, a, b, "");
-      else
-         res = LLVMBuildSub(builder, a, b, "");
+      res = LLVMBuildSub(builder, a, b, "");
 
    if(bld->type.norm && (bld->type.floating || bld->type.fixed))
       res = lp_build_max_simple(bld, res, bld->zero, GALLIVM_NAN_RETURN_OTHER_SECOND_NONNAN);
@@ -980,29 +962,15 @@
    else
       shift = NULL;
 
-   if(LLVMIsConstant(a) && LLVMIsConstant(b)) {
-      if (type.floating)
-         res = LLVMConstFMul(a, b);
-      else
-         res = LLVMConstMul(a, b);
-      if(shift) {
-         if(type.sign)
-            res = LLVMConstAShr(res, shift);
-         else
-            res = LLVMConstLShr(res, shift);
-      }
-   }
-   else {
-      if (type.floating)
-         res = LLVMBuildFMul(builder, a, b, "");
+   if (type.floating)
+      res = LLVMBuildFMul(builder, a, b, "");
+   else
+      res = LLVMBuildMul(builder, a, b, "");
+   if(shift) {
+      if(type.sign)
+         res = LLVMBuildAShr(builder, res, shift, "");
       else
-         res = LLVMBuildMul(builder, a, b, "");
-      if(shift) {
-         if(type.sign)
-            res = LLVMBuildAShr(builder, res, shift, "");
-         else
-            res = LLVMBuildLShr(builder, res, shift, "");
-      }
+         res = LLVMBuildLShr(builder, res, shift, "");
    }
 
    return res;
@@ -1288,15 +1256,6 @@
    if(a == bld->undef || b == bld->undef)
       return bld->undef;
 
-   if(LLVMIsConstant(a) && LLVMIsConstant(b)) {
-      if (type.floating)
-         return LLVMConstFDiv(a, b);
-      else if (type.sign)
-         return LLVMConstSDiv(a, b);
-      else
-         return LLVMConstUDiv(a, b);
-   }
-
    /* fast rcp is disabled (just uses div), so makes no sense to try that */
    if(FALSE &&
       ((util_get_cpu_caps()->has_sse && type.width == 32 && type.length == 4) ||
@@ -2645,9 +2604,6 @@
 
    assert(type.floating);
 
-   if(LLVMIsConstant(a))
-      return LLVMConstFDiv(bld->one, a);
-
    /*
     * We don't use RCPPS because:
     * - it only has 10bits of precision
diff '--color=auto' -aruN old/src/gallium/auxiliary/gallivm/lp_bld.h new/src/gallium/auxiliary/gallivm/lp_bld.h
--- old/src/gallium/auxiliary/gallivm/lp_bld.h	2022-08-18 00:53:25.000000000 +0800
+++ new/src/gallium/auxiliary/gallivm/lp_bld.h	2022-09-07 02:20:16.149738271 +0800
@@ -82,9 +82,18 @@
 #define LLVMCreateBuilder ILLEGAL_LLVM_FUNCTION
 
 #if LLVM_VERSION_MAJOR >= 8
+#if LLVM_VERSION_MAJOR >= 15
+#define GALLIVM_HAVE_CORO 0
+#define GALLIVM_USE_NEW_PASS 1
+#elif LLVM_VERSION_MAJOR >= 8
 #define GALLIVM_HAVE_CORO 1
+#define GALLIVM_USE_NEW_PASS 0
 #else
 #define GALLIVM_HAVE_CORO 0
+#define GALLIVM_USE_NEW_PASS 0
+#endif
 #endif
+ 
+#define GALLIVM_COROUTINES (GALLIVM_HAVE_CORO || GALLIVM_USE_NEW_PASS)
 
 #endif /* LP_BLD_H */
diff '--color=auto' -aruN old/src/gallium/auxiliary/gallivm/lp_bld_init.c new/src/gallium/auxiliary/gallivm/lp_bld_init.c
--- old/src/gallium/auxiliary/gallivm/lp_bld_init.c	2022-08-18 00:53:25.000000000 +0800
+++ new/src/gallium/auxiliary/gallivm/lp_bld_init.c	2022-09-07 02:15:44.453529273 +0800
@@ -45,7 +45,9 @@
 #include <llvm-c/Transforms/Utils.h>
 #endif
 #include <llvm-c/BitWriter.h>
-#if GALLIVM_HAVE_CORO
+#if GALLIVM_USE_NEW_PASS == 1
+#include <llvm-c/Transforms/PassBuilder.h>
+#elif GALLIVM_HAVE_CORO == 1
 #if LLVM_VERSION_MAJOR <= 8 && (defined(PIPE_ARCH_AARCH64) || defined (PIPE_ARCH_ARM) || defined(PIPE_ARCH_S390) || defined(PIPE_ARCH_MIPS64))
 #include <llvm-c/Transforms/IPO.h>
 #endif
@@ -110,6 +112,7 @@
 static boolean
 create_pass_manager(struct gallivm_state *gallivm)
 {
+#if GALLIVM_USE_NEW_PASS == 0
    assert(!gallivm->passmgr);
    assert(gallivm->target);
 
@@ -117,7 +120,7 @@
    if (!gallivm->passmgr)
       return FALSE;
 
-#if GALLIVM_HAVE_CORO
+#if GALLIVM_HAVE_CORO == 1
    gallivm->cgpassmgr = LLVMCreatePassManager();
 #endif
    /*
@@ -134,7 +137,7 @@
       free(td_str);
    }
 
-#if GALLIVM_HAVE_CORO
+#if GALLIVM_HAVE_CORO == 1
 #if LLVM_VERSION_MAJOR <= 8 && (defined(PIPE_ARCH_AARCH64) || defined (PIPE_ARCH_ARM) || defined(PIPE_ARCH_S390) || defined(PIPE_ARCH_MIPS64))
    LLVMAddArgumentPromotionPass(gallivm->cgpassmgr);
    LLVMAddFunctionAttrsPass(gallivm->cgpassmgr);
@@ -181,14 +184,13 @@
        */
       LLVMAddPromoteMemoryToRegisterPass(gallivm->passmgr);
    }
-#if GALLIVM_HAVE_CORO
+#if GALLIVM_HAVE_CORO == 1
    LLVMAddCoroCleanupPass(gallivm->passmgr);
 #endif
-
+#endif
    return TRUE;
 }
 
-
 /**
  * Free gallivm object's LLVM allocations, but not any generated code
  * nor the gallivm object itself.
@@ -196,15 +198,17 @@
 void
 gallivm_free_ir(struct gallivm_state *gallivm)
 {
+#if GALLIVM_USE_NEW_PASS == 0
    if (gallivm->passmgr) {
       LLVMDisposePassManager(gallivm->passmgr);
    }
 
-#if GALLIVM_HAVE_CORO
+#if GALLIVM_HAVE_CORO == 1
    if (gallivm->cgpassmgr) {
       LLVMDisposePassManager(gallivm->cgpassmgr);
    }
 #endif
+#endif
 
    if (gallivm->engine) {
       /* This will already destroy any associated module */
@@ -232,8 +236,12 @@
    gallivm->target = NULL;
    gallivm->module = NULL;
    gallivm->module_name = NULL;
+#if GALLIVM_USE_NEW_PASS == 0
+#if GALLIVM_HAVE_CORO == 1
    gallivm->cgpassmgr = NULL;
+#endif
    gallivm->passmgr = NULL;
+#endif
    gallivm->context = NULL;
    gallivm->builder = NULL;
    gallivm->cache = NULL;
@@ -571,7 +579,6 @@
 void
 gallivm_compile_module(struct gallivm_state *gallivm)
 {
-   LLVMValueRef func;
    int64_t time_begin = 0;
 
    assert(!gallivm->compiled);
@@ -581,6 +588,13 @@
       gallivm->builder = NULL;
    }
 
+   LLVMSetDataLayout(gallivm->module, "");
+   assert(!gallivm->engine);
+   if (!init_gallivm_engine(gallivm)) {
+      assert(0);
+   }
+   assert(gallivm->engine);
+
    if (gallivm->cache && gallivm->cache->data_size) {
       goto skip_cached;
    }
@@ -604,11 +618,33 @@
    if (gallivm_debug & GALLIVM_DEBUG_PERF)
       time_begin = os_time_get();
 
-#if GALLIVM_HAVE_CORO
+#if GALLIVM_USE_NEW_PASS == 1
+   char passes[1024];
+   passes[0] = 0;
+
+   /*
+    * there should be some way to combine these two pass runs but I'm not seeing it,
+    * at the time of writing.
+    */
+   strcpy(passes, "default<O0>");
+
+   LLVMPassBuilderOptionsRef opts = LLVMCreatePassBuilderOptions();
+   LLVMRunPasses(gallivm->module, passes, LLVMGetExecutionEngineTargetMachine(gallivm->engine), opts);
+
+   if (!(gallivm_perf & GALLIVM_PERF_NO_OPT))
+      strcpy(passes, "sroa,early-cse,simplifycfg,reassociate,mem2reg,constprop,instcombine,");
+   else
+      strcpy(passes, "mem2reg");
+
+   LLVMRunPasses(gallivm->module, passes, LLVMGetExecutionEngineTargetMachine(gallivm->engine), opts);
+   LLVMDisposePassBuilderOptions(opts);
+#else
+#if GALLIVM_HAVE_CORO == 1
    LLVMRunPassManager(gallivm->cgpassmgr, gallivm->module);
 #endif
    /* Run optimization passes */
    LLVMInitializeFunctionPassManager(gallivm->passmgr);
+   LLVMValueRef func;
    func = LLVMGetFirstFunction(gallivm->module);
    while (func) {
       if (0) {
@@ -626,7 +662,7 @@
       func = LLVMGetNextFunction(func);
    }
    LLVMFinalizeFunctionPassManager(gallivm->passmgr);
-
+#endif
    if (gallivm_debug & GALLIVM_DEBUG_PERF) {
       int64_t time_end = os_time_get();
       int time_msec = (int)((time_end - time_begin) / 1000);
@@ -653,12 +689,6 @@
     * lp_build_create_jit_compiler_for_module()
     */
  skip_cached:
-   LLVMSetDataLayout(gallivm->module, "");
-   assert(!gallivm->engine);
-   if (!init_gallivm_engine(gallivm)) {
-      assert(0);
-   }
-   assert(gallivm->engine);
 
    ++gallivm->compiled;
 
diff '--color=auto' -aruN old/src/gallium/auxiliary/gallivm/lp_bld_init.h new/src/gallium/auxiliary/gallivm/lp_bld_init.h
--- old/src/gallium/auxiliary/gallivm/lp_bld_init.h	2022-08-18 00:53:25.000000000 +0800
+++ new/src/gallium/auxiliary/gallivm/lp_bld_init.h	2022-09-07 02:15:44.454529291 +0800
@@ -46,8 +46,12 @@
    LLVMModuleRef module;
    LLVMExecutionEngineRef engine;
    LLVMTargetDataRef target;
+#if GALLIVM_USE_NEW_PASS == 0
    LLVMPassManagerRef passmgr;
+#if GALLIVM_HAVE_CORO == 1
    LLVMPassManagerRef cgpassmgr;
+#endif
+#endif
    LLVMContextRef context;
    LLVMBuilderRef builder;
    LLVMMCJITMemoryManagerRef memorymgr;
diff '--color=auto' -aruN old/src/gallium/drivers/llvmpipe/lp_context.c new/src/gallium/drivers/llvmpipe/lp_context.c
--- old/src/gallium/drivers/llvmpipe/lp_context.c	2022-08-18 00:53:25.000000000 +0800
+++ new/src/gallium/drivers/llvmpipe/lp_context.c	2022-09-07 01:03:32.182429522 +0800
@@ -250,6 +250,10 @@
    if (!llvmpipe->context)
       goto fail;
 
+#if LLVM_VERSION_MAJOR >= 15
+   LLVMContextSetOpaquePointers(llvmpipe->context, false);
+#endif
+
    /*
     * Create drawing context and plug our rendering stage into it.
     */
diff '--color=auto' -aruN old/src/gallium/drivers/llvmpipe/lp_screen.c new/src/gallium/drivers/llvmpipe/lp_screen.c
--- old/src/gallium/drivers/llvmpipe/lp_screen.c	2022-08-18 00:53:25.000000000 +0800
+++ new/src/gallium/drivers/llvmpipe/lp_screen.c	2022-09-07 02:15:44.454529291 +0800
@@ -215,7 +215,7 @@
       return lscreen->use_tgsi ? 330 : 450;
    }
    case PIPE_CAP_COMPUTE:
-      return GALLIVM_HAVE_CORO;
+      return GALLIVM_COROUTINES;
    case PIPE_CAP_USER_VERTEX_BUFFERS:
       return 1;
    case PIPE_CAP_TGSI_TEXCOORD:
@@ -394,7 +394,7 @@
    case PIPE_SHADER_TESS_CTRL:
    case PIPE_SHADER_TESS_EVAL:
       /* Tessellation shader needs llvm coroutines support */
-      if (!GALLIVM_HAVE_CORO || lscreen->use_tgsi)
+      if (!GALLIVM_COROUTINES || lscreen->use_tgsi)
          return 0;
       FALLTHROUGH;
    case PIPE_SHADER_VERTEX:
diff '--color=auto' -aruN old/src/gallium/drivers/llvmpipe/lp_test_arit.c new/src/gallium/drivers/llvmpipe/lp_test_arit.c
--- old/src/gallium/drivers/llvmpipe/lp_test_arit.c	2022-08-18 00:53:25.000000000 +0800
+++ new/src/gallium/drivers/llvmpipe/lp_test_arit.c	2022-09-07 01:03:32.182429522 +0800
@@ -438,6 +438,9 @@
    }
 
    context = LLVMContextCreate();
+#if LLVM_VERSION_MAJOR >= 15
+   LLVMContextSetOpaquePointers(context, false);
+#endif
    gallivm = gallivm_create("test_module", context, NULL);
 
    test_func = build_unary_test_func(gallivm, test, length, test_name);
diff '--color=auto' -aruN old/src/gallium/drivers/llvmpipe/lp_test_blend.c new/src/gallium/drivers/llvmpipe/lp_test_blend.c
--- old/src/gallium/drivers/llvmpipe/lp_test_blend.c	2022-08-18 00:53:25.000000000 +0800
+++ new/src/gallium/drivers/llvmpipe/lp_test_blend.c	2022-09-07 01:03:32.182429522 +0800
@@ -452,6 +452,9 @@
       dump_blend_type(stdout, blend, type);
 
    context = LLVMContextCreate();
+#if LLVM_VERSION_MAJOR >= 15
+   LLVMContextSetOpaquePointers(context, false);
+#endif
    gallivm = gallivm_create("test_module", context, NULL);
 
    func = add_blend_test(gallivm, blend, type);
diff '--color=auto' -aruN old/src/gallium/drivers/llvmpipe/lp_test_conv.c new/src/gallium/drivers/llvmpipe/lp_test_conv.c
--- old/src/gallium/drivers/llvmpipe/lp_test_conv.c	2022-08-18 00:53:25.000000000 +0800
+++ new/src/gallium/drivers/llvmpipe/lp_test_conv.c	2022-09-07 01:03:32.182429522 +0800
@@ -221,6 +221,9 @@
    }
 
    context = LLVMContextCreate();
+#if LLVM_VERSION_MAJOR >= 15
+   LLVMContextSetOpaquePointers(context, false);
+#endif
    gallivm = gallivm_create("test_module", context, NULL);
 
    func = add_conv_test(gallivm, src_type, num_srcs, dst_type, num_dsts);
diff '--color=auto' -aruN old/src/gallium/drivers/llvmpipe/lp_test_format.c new/src/gallium/drivers/llvmpipe/lp_test_format.c
--- old/src/gallium/drivers/llvmpipe/lp_test_format.c	2022-08-18 00:53:25.000000000 +0800
+++ new/src/gallium/drivers/llvmpipe/lp_test_format.c	2022-09-07 01:03:32.182429522 +0800
@@ -150,6 +150,9 @@
    unsigned i, j, k, l;
 
    context = LLVMContextCreate();
+#if LLVM_VERSION_MAJOR >= 15
+   LLVMContextSetOpaquePointers(context, false);
+#endif
    gallivm = gallivm_create("test_module_float", context, NULL);
 
    fetch = add_fetch_rgba_test(gallivm, verbose, desc,
@@ -251,6 +254,9 @@
    unsigned i, j, k, l;
 
    context = LLVMContextCreate();
+#if LLVM_VERSION_MAJOR >= 15
+   LLVMContextSetOpaquePointers(context, false);
+#endif
    gallivm = gallivm_create("test_module_unorm8", context, NULL);
 
    fetch = add_fetch_rgba_test(gallivm, verbose, desc,
diff '--color=auto' -aruN old/src/gallium/drivers/llvmpipe/lp_test_printf.c new/src/gallium/drivers/llvmpipe/lp_test_printf.c
--- old/src/gallium/drivers/llvmpipe/lp_test_printf.c	2022-08-18 00:53:25.000000000 +0800
+++ new/src/gallium/drivers/llvmpipe/lp_test_printf.c	2022-09-07 01:03:32.182429522 +0800
@@ -96,6 +96,9 @@
    boolean success = TRUE;
 
    context = LLVMContextCreate();
+#if LLVM_VERSION_MAJOR >= 15
+   LLVMContextSetOpaquePointers(context, false);
+#endif
    gallivm = gallivm_create("test_module", context, NULL);
 
    test = add_printf_test(gallivm);
